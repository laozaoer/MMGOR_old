// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _MMGOR_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _MMGOR_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _MMGOR_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _MMGOR_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// converNaN
arma::vec converNaN(const arma::vec& x);
RcppExport SEXP _MMGOR_converNaN(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(converNaN(x));
    return rcpp_result_gen;
END_RCPP
}
// likelihoodi
double likelihoodi(const double& b, const arma::vec& parameters, const arma::vec& Delta, const arma::mat& X, const arma::vec& Z, const int& ni, const double& r, const arma::mat& blC, const int& betadim, const int& gammadim);
RcppExport SEXP _MMGOR_likelihoodi(SEXP bSEXP, SEXP parametersSEXP, SEXP DeltaSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP niSEXP, SEXP rSEXP, SEXP blCSEXP, SEXP betadimSEXP, SEXP gammadimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const int& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type blC(blCSEXP);
    Rcpp::traits::input_parameter< const int& >::type betadim(betadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type gammadim(gammadimSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihoodi(b, parameters, Delta, X, Z, ni, r, blC, betadim, gammadim));
    return rcpp_result_gen;
END_RCPP
}
// weightfunction
arma::mat weightfunction(const arma::vec& parameters, const arma::mat& rules, const arma::field<arma::vec>& Delta, const arma::field<arma::vec>& X, const arma::mat& Z, const int& n, const arma::vec& ni, const double& r, const arma::field<arma::mat>& blC, const int& betadim, const int& gammadim);
RcppExport SEXP _MMGOR_weightfunction(SEXP parametersSEXP, SEXP rulesSEXP, SEXP DeltaSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP nSEXP, SEXP niSEXP, SEXP rSEXP, SEXP blCSEXP, SEXP betadimSEXP, SEXP gammadimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rules(rulesSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type blC(blCSEXP);
    Rcpp::traits::input_parameter< const int& >::type betadim(betadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type gammadim(gammadimSEXP);
    rcpp_result_gen = Rcpp::wrap(weightfunction(parameters, rules, Delta, X, Z, n, ni, r, blC, betadim, gammadim));
    return rcpp_result_gen;
END_RCPP
}
// DerivCal
arma::field<arma::mat> DerivCal(const double& b, const arma::vec& lastpar, const arma::vec& Delta, const arma::mat& X, const arma::vec& Z, const int& ni, const double& r, const arma::mat& blC, const int& betadim, const int& gammadim);
RcppExport SEXP _MMGOR_DerivCal(SEXP bSEXP, SEXP lastparSEXP, SEXP DeltaSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP niSEXP, SEXP rSEXP, SEXP blCSEXP, SEXP betadimSEXP, SEXP gammadimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lastpar(lastparSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const int& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type blC(blCSEXP);
    Rcpp::traits::input_parameter< const int& >::type betadim(betadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type gammadim(gammadimSEXP);
    rcpp_result_gen = Rcpp::wrap(DerivCal(b, lastpar, Delta, X, Z, ni, r, blC, betadim, gammadim));
    return rcpp_result_gen;
END_RCPP
}
// UpdateOnce
arma::vec UpdateOnce(const arma::vec& lastpar, const arma::mat& rules, const arma::field<arma::vec>& Delta, const arma::field<arma::vec>& X, const arma::mat& Z, const int& n, const arma::vec& ni, const double& r, const arma::field<arma::mat>& blC, const int& betadim, const int& gammadim);
RcppExport SEXP _MMGOR_UpdateOnce(SEXP lastparSEXP, SEXP rulesSEXP, SEXP DeltaSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP nSEXP, SEXP niSEXP, SEXP rSEXP, SEXP blCSEXP, SEXP betadimSEXP, SEXP gammadimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type lastpar(lastparSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rules(rulesSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type blC(blCSEXP);
    Rcpp::traits::input_parameter< const int& >::type betadim(betadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type gammadim(gammadimSEXP);
    rcpp_result_gen = Rcpp::wrap(UpdateOnce(lastpar, rules, Delta, X, Z, n, ni, r, blC, betadim, gammadim));
    return rcpp_result_gen;
END_RCPP
}
// MainFunc
arma::vec MainFunc(const arma::vec& lastpar, const arma::mat& rules, const arma::field<arma::vec>& Delta, const arma::field<arma::vec>& X, const arma::mat& Z, const int& n, const arma::vec& ni, const double& r, const arma::field<arma::mat>& blC, const int& betadim, const int& gammadim, const int& itermax, const double& criterion);
RcppExport SEXP _MMGOR_MainFunc(SEXP lastparSEXP, SEXP rulesSEXP, SEXP DeltaSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP nSEXP, SEXP niSEXP, SEXP rSEXP, SEXP blCSEXP, SEXP betadimSEXP, SEXP gammadimSEXP, SEXP itermaxSEXP, SEXP criterionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type lastpar(lastparSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rules(rulesSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type blC(blCSEXP);
    Rcpp::traits::input_parameter< const int& >::type betadim(betadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type gammadim(gammadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< const double& >::type criterion(criterionSEXP);
    rcpp_result_gen = Rcpp::wrap(MainFunc(lastpar, rules, Delta, X, Z, n, ni, r, blC, betadim, gammadim, itermax, criterion));
    return rcpp_result_gen;
END_RCPP
}
// likelihoodfunc1current
double likelihoodfunc1current(const double& b, const arma::vec& parameters, const arma::vec& Delta, const arma::mat& X, const arma::vec& Z, const int& ni, const double& r, const arma::mat& blC, const int& betadim, const int& gammadim);
RcppExport SEXP _MMGOR_likelihoodfunc1current(SEXP bSEXP, SEXP parametersSEXP, SEXP DeltaSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP niSEXP, SEXP rSEXP, SEXP blCSEXP, SEXP betadimSEXP, SEXP gammadimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const int& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type blC(blCSEXP);
    Rcpp::traits::input_parameter< const int& >::type betadim(betadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type gammadim(gammadimSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihoodfunc1current(b, parameters, Delta, X, Z, ni, r, blC, betadim, gammadim));
    return rcpp_result_gen;
END_RCPP
}
// testquadrature1current
double testquadrature1current(const arma::vec& parameters, const arma::mat& rules, const arma::field<arma::vec>& Delta, const arma::field<arma::vec>& X, const arma::mat& Z, const int& n, const arma::vec& ni, const double& r, const arma::field<arma::mat>& blC, const int& betadim, const int& gammadim);
RcppExport SEXP _MMGOR_testquadrature1current(SEXP parametersSEXP, SEXP rulesSEXP, SEXP DeltaSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP nSEXP, SEXP niSEXP, SEXP rSEXP, SEXP blCSEXP, SEXP betadimSEXP, SEXP gammadimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rules(rulesSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type blC(blCSEXP);
    Rcpp::traits::input_parameter< const int& >::type betadim(betadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type gammadim(gammadimSEXP);
    rcpp_result_gen = Rcpp::wrap(testquadrature1current(parameters, rules, Delta, X, Z, n, ni, r, blC, betadim, gammadim));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MMGOR_rcpparma_hello_world", (DL_FUNC) &_MMGOR_rcpparma_hello_world, 0},
    {"_MMGOR_rcpparma_outerproduct", (DL_FUNC) &_MMGOR_rcpparma_outerproduct, 1},
    {"_MMGOR_rcpparma_innerproduct", (DL_FUNC) &_MMGOR_rcpparma_innerproduct, 1},
    {"_MMGOR_rcpparma_bothproducts", (DL_FUNC) &_MMGOR_rcpparma_bothproducts, 1},
    {"_MMGOR_converNaN", (DL_FUNC) &_MMGOR_converNaN, 1},
    {"_MMGOR_likelihoodi", (DL_FUNC) &_MMGOR_likelihoodi, 10},
    {"_MMGOR_weightfunction", (DL_FUNC) &_MMGOR_weightfunction, 11},
    {"_MMGOR_DerivCal", (DL_FUNC) &_MMGOR_DerivCal, 10},
    {"_MMGOR_UpdateOnce", (DL_FUNC) &_MMGOR_UpdateOnce, 11},
    {"_MMGOR_MainFunc", (DL_FUNC) &_MMGOR_MainFunc, 13},
    {"_MMGOR_likelihoodfunc1current", (DL_FUNC) &_MMGOR_likelihoodfunc1current, 10},
    {"_MMGOR_testquadrature1current", (DL_FUNC) &_MMGOR_testquadrature1current, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_MMGOR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
